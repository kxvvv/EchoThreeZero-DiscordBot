import discord
import gspread
import asyncio
import json
import random


from discord.ext import commands
from discord.utils import get
from config import *

from discord import app_commands


intents = discord.Intents.all()
intents.members = True
intents.message_content = True

client = commands.Bot(command_prefix=PREFIX, intents=intents, help_command=None)



# gc = gspread.service_account(filename='secretkey.json')
# sh = gc.open("–∫–æ–ø–∏—è 2.0")
# worksheet = sh.sheet1


########################



########################



########################


@client.event
async def on_ready():
    print(f"–ó–¥–∞—Ä–æ–≤–∞ —ë–ø—Ç‚úåÔ∏è, —ç—Ç–æ —è - {client.user}")
    await client.tree.sync(guild=discord.Object(id=GUILD)) # —Å–∏–Ω—Ö–æ—Ä–Ω–∏–∑–∞—Ü–∏—è
    await client.change_presence(status=discord.Status.online, activity = discord.Activity(name = f'–Ω–∞ –≤—Å–µ—Ö —Å–≤—ã—Å–æ–∫–∞.', type = discord.ActivityType.watching))


@client.listen("on_command_error")
async def cooldown_message(ctx, error):
    errorlog = client.get_channel(ERROR_ROOM) # —á–∞—Ç
    await errorlog.send(f"```\n\n\n\n\n\n_error_\n\n{error}```")


# @client.command()
# async def qwe(ctx):
#     guild = client.get_guild(GUILD)
#     for guild in client.guilds:
#         for member in guild.members:
#             print(member)


async def get_user_profile(user_id):
    user_id = str(user_id)

    with open("basa.json", "r") as file:
        profile = json.load(file)

    if user_id not in profile.keys():
        profile[user_id] = PROFILE_DEFAULT
    
        logs = client.get_channel(LOGS)
        await logs.send(f'‚ùó <@{user_id}> —Å–æ–∑–¥–∞—ë—Ç —Å–µ–±–µ –ë–î.')

    with open("basa.json", "w") as file:
        json.dump(profile, file)

    return profile[user_id]

async def set_user_profile(user_id, parameter, new_value):
    user_id = str(user_id)

    with open("basa.json", "r") as file:
        profile = json.load(file)

    if user_id not in profile.keys():
        profile[user_id] = PROFILE_DEFAULT

        logs = client.get_channel(LOGS)
        await logs.send(f'‚ùó <@{user_id}> —Å–æ–∑–¥–∞—ë—Ç —Å–µ–±–µ –ë–î, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ.')

    profile[user_id][parameter] = new_value

    with open("basa.json", "w") as file:
        json.dump(profile, file)



def joinToSheet():
    gc = gspread.service_account(filename='secretkey.json') #test
    sh = gc.open("–ö–æ–∫–≤–∞–∫—Å –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–∞–Ω–æ–≤ 2.0") #test
    worksheet = sh.sheet1
    return gc, sh, worksheet


async def whatColorYouNeed(row, UserWarnBan='None'):

    if UserWarnBan == 'None':
        return 'None'

    whatColor = 'whatColor'
    whatColor += UserWarnBan

    gc, sh, worksheet = joinToSheet()

    worksheet.format(f'A{row}', {'textFormat': {'foregroundColor': {'red': 255/255, 'green': 255/255, 'blue': 255/255}}})
    worksheet.update(f'A{row}', whatColor)

    await asyncio.sleep(3)

    thisColor = worksheet.get(f'A{row}')
    worksheet.update(f'A{row}', '')

    return thisColor

async def getProfileFromSheet(user, warnCheck, banCheck, testCheck, row, col, worksheet, UserWarnBan):

    async def colorStatus():
        thisColor = await whatColorYouNeed(row=row, UserWarnBan='User')
        thisColor = thisColor[0]
        thisColor = thisColor[0]
        color = thisColor

        h = color.lstrip('#')

        rgb = tuple(int(h[i:i+2], 16) for i in (0, 2, 4))

        colour=discord.Colour.from_rgb(rgb[0], rgb[1], rgb[2])

        return colour


    embed = discord.Embed(
        colour=await colorStatus(),
        #description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Ç–∞–±–ª–∏—Ü—ã", 
        title=u"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Ç–∞–±–ª–∏—Ü—ã"
    )
    embed.set_author(name=user)




    warnNullOrNot = worksheet.get_values(f'D{row}:D{row+50}')
    banNullOrNot = worksheet.get_values(f'G{row}:G{row+50}')
    listWarn = ''
    listBan = ''

    warnCount = warnCheck
    for x in warnNullOrNot:
        if warnCount == 0:
            break
        if x == ['']:
            break
        listWarn += f"{x[0]}\n"
        warnCount -= 1

    banCount = banCheck
    for x in banNullOrNot:
        if banCount == 0:
            break
        if x == ['']:
            break
        listBan += f"{x[0]}\n"
        banCount -= 1


    if listWarn == '':
        listWarn = '-'
    if listBan == '':
        listBan = '-'

    embed.add_field(name="‚ö†Ô∏è –í–∞—Ä–Ω—ã", value=warnCheck)
    embed.insert_field_at(1,name="‚õî –ë–∞–Ω—ã", value=banCheck)
    embed.add_field(name="üìÉ –¢–µ—Å—Ç", value=testCheck)
    embed.add_field(name='—Å–ø–∏—Å–æ–∫ –≤–∞—Ä–Ω–æ–≤', value=listWarn)
    embed.add_field(name='—Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤', value=listBan)


    embed.set_footer(text=f'–°—Ç—Ä–æ–∫–∞ {row}, —Å—Ç–æ–ª–±–∏–∫ {col}')

    return embed



def checkForWarn(row, worksheet):

    ruleNumbers = worksheet.get_values(f'C{row}:C{row+50}')

    try:
        if ruleNumbers[0] == ['']:
            return 0
    except:
        return 0
    
    li = []
    warnCount = 0
    for x in ruleNumbers:
        if x not in li:
            li.append(x)
        else:
            break
    for x in li:
        if x != ['']:               
            warnCount += 1

    return warnCount



def checkForBan(row, worksheet):
    
    ruleNumbersSecond = worksheet.get_values(f'F{row}:F{row+50}')

    try:
        if ruleNumbersSecond[0] == ['']:
            return 0
    except:
        return 0

    if ruleNumbersSecond[0] == ['']:
        return 0
    li2 = []
    banCount = 0
    for x in ruleNumbersSecond:
        if x not in li2:
            li2.append(x)
        else:
            break
    for x in li2:
        if x != ['']:               
            banCount += 1

    return banCount


def checkForTest(row, sh):


    fin = sh.sheet1.get(f'H{str(row)}')
    if fin == []:
        return '-'
    
    fin = fin[0]
    fin = str(fin[0])
    if fin == '–î–∞':
        return '–ü—Ä–æ—à—ë–ª.'
    elif fin == '–ù–µ—Ç':
        return '–ù–µ –ø—Ä–æ—à—ë–ª.'
    else:
        return fin
    

def checkRole(ctx, user):
    echoRole = discord.utils.find(lambda r: r.name == '‚òÑÔ∏è', ctx.guild.roles)
    elysiumRole = discord.utils.find(lambda r: r.name == 'üåë', ctx.guild.roles)
    solarisRole = discord.utils.find(lambda r: r.name == 'üåï', ctx.guild.roles)
    atharaRole = discord.utils.find(lambda r: r.name == 'üåå', ctx.guild.roles)
    novaRole = discord.utils.find(lambda r: r.name == 'ü™ê', ctx.guild.roles)
    mainRole = discord.utils.find(lambda r: r.name == 'üöÄ', ctx.guild.roles)
    allRole = discord.utils.find(lambda r: r.name == 'üçø', ctx.guild.roles)
    if echoRole in user.roles:
        return discord.Colour(0x00FFFF)
    elif elysiumRole in user.roles:
        return discord.Colour(0x808080)
    elif solarisRole in user.roles:
        return discord.Colour(0xF8FF00)
    elif atharaRole in user.roles:
        return discord.Colour(0xC485F7)
    elif novaRole in user.roles:
        return discord.Colour(0xFFA500)
    elif mainRole in user.roles:
        return discord.Colour(0xFF0000)
    elif allRole in user.roles:
        return discord.Colour(0xFFFFFF)
    else:
        return discord.Colour(0x000000)
    
def checkFooter(ctx, user):
    echoRole = discord.utils.find(lambda r: r.name == '‚òÑÔ∏è', ctx.guild.roles)
    elysiumRole = discord.utils.find(lambda r: r.name == 'üåë', ctx.guild.roles)
    solarisRole = discord.utils.find(lambda r: r.name == 'üåï', ctx.guild.roles)
    atharaRole = discord.utils.find(lambda r: r.name == 'üåå', ctx.guild.roles)
    novaRole = discord.utils.find(lambda r: r.name == 'ü™ê', ctx.guild.roles)
    mainRole = discord.utils.find(lambda r: r.name == 'üöÄ', ctx.guild.roles)
    allRole = discord.utils.find(lambda r: r.name == 'üçø', ctx.guild.roles)
    if echoRole in user.roles:
        return f'{user.id}, echo‚òÑÔ∏è'
    elif elysiumRole in user.roles:
        return f'{user.id}, elysiumüåë'
    elif solarisRole in user.roles:
        return f'{user.id}, solarisüåï'
    elif atharaRole in user.roles:
        return f'{user.id}, atharaüåå'
    elif novaRole in ctx.user.roles:
        return f'{user.id}, novaü™ê'
    elif mainRole in user.roles:
        return f'{user.id}, mainüöÄ'
    elif allRole in user.roles:
        return f'{user.id}, allüçø'
    else:
        return f'{user.id}, ???'
    
#await msgToLOGG(ctx, worksheet, user, msgAuthor, reason)
async def msgToLOGG(ctx, worksheet, user, msgAuthor, clrColor=None, clrColum=None, clrNumber=None, choose=None, rule=None, reason=None, isPerma=False, isColor=False):

    logs = client.get_channel(LOGS)

    try:
        cell = worksheet.find(user)
        row = cell.row
        col = cell.col
    except AttributeError:
        row = '-'
        col = '-'


    member = msgAuthor

        
    def checkForAction():
        if isPerma == True:
            return f'–ó–∞–ø–∏—Å–∞–ª –ü–ï–†–ú–£ –∏–≥—Ä–æ–∫—É.'
        elif isColor == True:
            return f'–ü–æ–º–µ–Ω—è–ª —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫—É'
        elif choose != None:
            return f'–û–±–Ω–æ–≤–∏–ª —Ç–µ—Å—Ç –∏–≥—Ä–æ–∫—É.'
        elif rule != None:
            return f'–ó–∞–ø–∏—Å–∞–ª –Ω–æ–≤–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ.'
        


        elif reason != None:
            return f'–ó–∞–ø–∏—Å–∞–ª –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É.'
        else:
            return f'–ß—Ç–æ —Ç–æ —Å–¥–µ–ª–∞–ª, –Ω–æ –Ω–µ –º–æ–≥—É –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å.'
    
    def checkForReason():
        if reason == 'None':
            return '–ë–ï–ó –ü–†–ò–ß–ò–ù–´.'
        elif reason != None:
            return reason
        else:
            return ''
        



    embed = discord.Embed(
        colour=checkRole(ctx=ctx, user=ctx.user), 
        description=checkForReason(), 
        title=checkForAction()
    )
    embed.set_author(name=ctx.user)

    embed.add_field(name="–ò–≥—Ä–æ–∫", value=user)
    if choose != None:
        embed.add_field(name="–¢–µ—Å—Ç", value=choose.name)
    if rule != None:
        embed.add_field(name="–ü—Ä–∞–≤–∏–ª–æ", value=rule)

    if clrColor != None:
        embed.add_field(name="–¶–≤–µ—Ç", value=clrColor)
    if clrColum != None:
        embed.add_field(name="–°—Ç–æ–ª–±–∏–∫", value=clrColum)
    if clrNumber != None:
        embed.add_field(name="–ù–æ–º–µ—Ä", value=clrNumber)
    

    embed.set_thumbnail(url=member.avatar.url)

    embed.set_footer(text=f'{checkFooter(ctx=ctx, user=ctx.user)}, {row}')


    await logs.send(embed=embed)



@client.tree.command(name = "–≤—ã–¥–∞—Ç—å-–∑–∞–º–µ—Ç–∫—É", description= '–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–≥—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ', guild=discord.Object(id=GUILD))
async def note(ctx, –∏–≥—Ä–æ–∫: str=None, –ø—Ä–∏—á–∏–Ω–∞: str=None):

    user = –∏–≥—Ä–æ–∫
    reason = –ø—Ä–∏—á–∏–Ω–∞

    await ctx.response.defer()

    gc, sh, worksheet = joinToSheet()

    values_list = worksheet.col_values(2)

    


    if user in values_list:
        user = f'{user}'
    elif (f'{user} ' in values_list):
        user = f'{user} '
    elif (f'{user}  ' in values_list):
        user = f'{user}  '
    else:
        await ctx.response.send_message(f"‚ùå –ò–≥—Ä–æ–∫–∞ `{user}` –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        return


    infochat = ctx.channel_id # —á–∞—Ç
    infochat = client.get_channel(infochat)
    msg = await infochat.send(f'**üîÑ –ø–æ–∏—Å–∫ {user}...**')

    cell = worksheet.find(user)
    
    row = cell.row
    col = cell.col


    embed = await getProfileFromSheet(user, checkForWarn(row, worksheet), checkForBan(row, worksheet), checkForTest(row, sh), row, col, worksheet, UserWarnBan='User')
    await asyncio.sleep(3)
    await ctx.followup.send(embed=embed)



    
 

    await msg.add_reaction('‚úÖ')
    await msg.add_reaction('‚ùå')

    await msg.edit(content=f'**‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ```{reason}```**')

    trueUser = ctx.user
    
    def check(reaction, msgAuthor): # trueUser = ctx.user
        if trueUser == msgAuthor:
            return msgAuthor == ctx.user and str(reaction.emoji) == '‚úÖ' or str(reaction.emoji) == '‚ùå'
    try:
        reaction, msgAuthor = await client.wait_for('reaction_add', timeout=25.0, check=check)
    except asyncio.TimeoutError:
        await msg.edit(content='‚ùå –ß–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
    else:
        if reaction.emoji == '‚ùå':
            await msg.edit(content='‚ùå –û—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.')
            return
        elif reaction.emoji == '‚úÖ':
            await msg.edit(content=f'**üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å–∏–∫ :middle_finger:**') #{reaction.emoji}
            await msgToLOGG(ctx, worksheet, user, msgAuthor, reason=reason)
            try:
                worksheet.insert_note(f'B{row}', f'{reason}')
                
                await msg.edit(content=f'**‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–ø–∏—Å–∞–ª –∑–∞–º–µ—Ç–∫—É –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É!**')
            except:
                await msg.edit(content='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–∏–Ω–≥—É–π –∏–¥–∏–æ—Ç–∞ –∫—Å–æ–≤–∞.')
        else:
            await msg.edit(content='‚ùå —á–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')

@client.tree.command(name = "–ø–µ—Ä–º–∞", description= '–∑–∞–ø–∏—Å—å –ø–µ—Ä–º—ã', guild=discord.Object(id=GUILD))
async def perma(ctx, –∏–≥—Ä–æ–∫: str=None, –ø—Ä–∞–≤–∏–ª–æ: str=None, –ø—Ä–∏—á–∏–Ω–∞: str=None):

    user = –∏–≥—Ä–æ–∫
    rule = –ø—Ä–∞–≤–∏–ª–æ
    reason = –ø—Ä–∏—á–∏–Ω–∞
    gc, sh, worksheet = joinToSheet()
    values_list = worksheet.col_values(2)
    playerIsNew = False

    if user in values_list:
        user = f'{user}'
    elif (f'{user} ' in values_list):
        user = f'{user} '
    elif (f'{user}  ' in values_list):
        user = f'{user}  '
    else:
        await ctx.response.send_message(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫–∞ `{user}` –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        playerIsNew = True
        

    try:
        if '–ü—Ä–∞–≤–∏–ª–æ' in rule or '–ø—Ä–∞–≤–∏–ª–æ' in rule:
            await ctx.response.send_message('‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ, **–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.**')
            return
    except:
        await ctx.response.send_message('‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ, **–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.**')
        return


    if reason == None:
        await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞.')
        return

    if playerIsNew == False:
        await ctx.response.defer()

    def newPlayer():
        lastdude = values_list[-1]

        cell = worksheet.find(lastdude)
        row = cell.row

        banCount = checkForBan(row, worksheet)
        warnCount = checkForWarn(row, worksheet)
        mainCount = max(banCount, warnCount)

        if mainCount != 0:
            row += mainCount
        else:
            row += 1


        def ruleFormat():
            worksheet.format(f"G{row}:G{row}", { 'backgroundColor': {
                'red':234/255,
                'green':67/255,
                'blue':53/255}})

        def playerFormat():
            worksheet.format(f"B{row}", {
                "backgroundColor": {
                "red": 255.0,
                "green": 255.0,
                "blue": 255.0
                },
                "textFormat": {
                "foregroundColor": {
                    "red": 1.0,
                    "green": 1.0,
                    "blue": 1.0
                },
                }
            })
        
        worksheet.update(f'B{row}', user)
        playerFormat()

        worksheet.update(f'F{row}', '1')
        worksheet.update(f'G{row}', str(f'PERMA: –ü—Ä–∞–≤–∏–ª–æ {rule}'))
        ruleFormat()
        worksheet.insert_note(f'G{row}', f'{reason}')



    async def oldPlayer(embedOrWrite):

            


        cell = worksheet.find(user)
        
        row = cell.row
        col = cell.col
        banCount = checkForBan(row, worksheet)
        


        if embedOrWrite == 'embed':
            warnCount = checkForWarn(row, worksheet)
            embed = await getProfileFromSheet(user, warnCount, banCount, checkForTest(row, sh), row, col, worksheet)
            return embed

        if embedOrWrite == 'write':
            warnCount = checkForWarn(row, worksheet)
            #needToAdd = banCount
            mainCount = max(banCount, warnCount)
            def ruleFormat(count):
                worksheet.format(f"G{row+count}:G{row+count}", { 'backgroundColor': {
                    'red':234/255,
                    'green':67/255,
                    'blue':53/255}})

            def playerFormat():
                worksheet.format(f"B{row}", {
                    "backgroundColor": {
                    "red": 255.0,
                    "green": 255.0,
                    "blue": 255.0
                    },
                    "textFormat": {
                    "foregroundColor": {
                        "red": 1.0,
                        "green": 1.0,
                        "blue": 1.0
                    },
                    }
                })

            def addField(count):
                worksheet.insert_row(['', '', '', '', '', '', ''], index=row+count) #count+1
                worksheet.merge_cells(f'B{row}:B{row+count}', 'MERGE_ALL')
            
            worksheet.update(f'B{row}', user)
            playerFormat()

            banNullOrNot = worksheet.get_values(f'G{row}:G{row+50}')
            
            needToAdd = 0
            if banNullOrNot[0] != ['']:
                for x in banNullOrNot:
                    if x == ['']:
                        break
                    needToAdd += 1
            if banCount > needToAdd:
                worksheet.update(f'G{row+needToAdd}', str(f'PERMA: –ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                worksheet.format(f'G{row+needToAdd}', {'textFormat': {'strikethrough': False}})
                ruleFormat(needToAdd)

            elif banCount < needToAdd:
                addField(banCount)
                worksheet.update(f'F{row+banCount}', str(f'{banCount+1}')) # test
                worksheet.update(f'G{row+banCount}', str(f'PERMA: –ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'G{row+banCount}', f'{reason}')
                worksheet.format(f'G{row+banCount}', {'textFormat': {'strikethrough': False}})
                ruleFormat(banCount)

            elif banCount == needToAdd:
                if banCount == 0 and needToAdd == 0:
                    worksheet.update(f'F{row+needToAdd}', str(f'1'))
                    worksheet.update(f'G{row+needToAdd}', str(f'PERMA: –ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                    worksheet.format(f'G{row+needToAdd}', {'textFormat': {'strikethrough': False}})
                    ruleFormat(needToAdd)
                elif banCount < mainCount:
                    worksheet.update(f'F{row+needToAdd}', str(f'{banCount+1}'))
                    worksheet.update(f'G{row+needToAdd}', str(f'PERMA: –ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                    worksheet.format(f'G{row+needToAdd}', {'textFormat': {'strikethrough': False}})
                    ruleFormat(needToAdd)
                else:
                    addField(banCount)
                    worksheet.update(f'F{row+banCount}', str(f'{banCount+1}')) # test
                    worksheet.update(f'G{row+needToAdd}', str(f'PERMA: –ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                    worksheet.format(f'G{row+needToAdd}', {'textFormat': {'strikethrough': False}})
                    ruleFormat(needToAdd)
            return

    
        





    trueUser = ctx.user

    infochat = ctx.channel_id # —á–∞—Ç
    infochat = client.get_channel(infochat)
    
    if playerIsNew == False:
        msg = await infochat.send(f'üîÑ –∑–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ {user}...')
        embed = oldPlayer('embed')
        await asyncio.sleep(3)
        await ctx.followup.send(embed=embed)

    if playerIsNew == True:
        msg = await infochat.send(f'**üîÑ –æ–∂–∏–¥–∞–π...**')

    await msg.add_reaction('‚úÖ')
    await msg.add_reaction('‚ùå')

    
    if playerIsNew == True:
        await msg.edit(content=f'**‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π:** ```{reason}``` ')
    if playerIsNew == False:
        await msg.edit(content=f'**‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–ø–∏—Å–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –¥–∞–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–º—ã:** ```{reason}```')

    trueUser = ctx.user
    
    def check(reaction, msgAuthor): # trueUser = ctx.user
        if trueUser == msgAuthor:
            return msgAuthor == ctx.user and str(reaction.emoji) == '‚úÖ' or str(reaction.emoji) == '‚ùå'
    try:
        reaction, msgAuthor = await client.wait_for('reaction_add', timeout=25.0, check=check)
    except asyncio.TimeoutError:
        await msg.edit(content='‚ùå –ß–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
    else:
        if reaction.emoji == '‚ùå':
            await msg.edit(content='‚ùå –û—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.')
            return
        elif reaction.emoji == '‚úÖ':
            await msg.edit(content=f'**üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å–∏–∫ :middle_finger:**') #{reaction.emoji}
            try:
                if playerIsNew == True:
                    newPlayer()
                    await msg.edit(content=f'**‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–ø–∏—Å–∞–ª –ü–ï–†–ú–£ –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É!**')
                if playerIsNew == False:
                    oldPlayer('write')
                    await msg.edit(content=f'**‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–ø–∏—Å–∞–ª –ü–ï–†–ú–£ —Å—Ç–∞—Ä–æ–º—É –∏–≥—Ä–æ–∫—É!**')
                await msgToLOGG(ctx, worksheet, user, msgAuthor, rule=rule, reason=reason, isPerma=True)
                profile = await get_user_profile(ctx.user.id)
                user_id = ctx.user.id
                new_value = profile['ban'] + 1
                parameter = 'ban'
                await set_user_profile(user_id, parameter, new_value)

                logs = client.get_channel(LOGS)
                await logs.send(f'‚õî {ctx.user} –∑–∞–ø–∏—Å–∞–ª —Å–µ–±–µ –±–∞–Ω—á–∏–∫')
            except:
                await msg.edit(content='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–∏–Ω–≥—É–π –∏–¥–∏–æ—Ç–∞ –∫—Å–æ–≤–∞.')
        else:
            await msg.edit(content='‚ùå —á–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
    

@client.tree.command(name = "–≤—ã–¥–∞—Ç—å-—Ç–µ—Å—Ç", description= '–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç –∏–≥—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ', guild=discord.Object(id=GUILD))
@app_commands.choices(–≤—ã–±–æ—Ä=[
    discord.app_commands.Choice(name='–ü—Ä–æ—à—ë–ª', value=1),
    discord.app_commands.Choice(name='–ù–µ –ø—Ä–æ—à—ë–ª', value=2),
    discord.app_commands.Choice(name='–£–±—Ä–∞—Ç—å', value=3),
])
async def giveTest(ctx, –∏–≥—Ä–æ–∫: str=None, –≤—ã–±–æ—Ä: app_commands.Choice[int]=0):

    user = –∏–≥—Ä–æ–∫
    choose = –≤—ã–±–æ—Ä

    gc, sh, worksheet = joinToSheet()

    access = discord.utils.find(lambda r: r.name == 'üìù', ctx.guild.roles)
    if access not in ctx.user.roles:
        await ctx.response.send_message('‚ùå –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return

    if user == None:
        await ctx.response.send_message(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∏–≥—Ä–æ–∫.")
        return
    
    if choose.value == 0:
        await ctx.response.send_message(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ —á—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É —Ç–µ—Å—Ç–∞.")
        return

    skipOrNot = False

    def newPlayer():
        lastdude = values_list[-1]

        cell = worksheet.find(lastdude)
        row = cell.row

        banCount = checkForBan(row, worksheet)
        warnCount = checkForWarn(row, worksheet)
        mainCount = max(banCount, warnCount)

        if mainCount != 0:
            row += mainCount
        else:
            row += 1

        def testFormat():
            worksheet.format(f"H{row}", {
                "horizontalAlignment": "CENTER",
                "textFormat": {
                "fontSize": 12,
                "bold": True
                }
            })

        worksheet.update(f'B{row}', user)
        if choose.value == 1: # –ø—Ä–æ—à–µ–ª
            worksheet.update(f'H{row}', '–î–∞')
            testFormat()
        elif choose.value == 2: # –Ω–µ –ø—Ä–æ—à–µ–ª
            worksheet.update(f'H{row}', '–ù–µ—Ç')
            testFormat()
        elif choose.value == 3: # —É–±—Ä–∞—Ç—å
            worksheet.update(f'H{row}', '')

    values_list = worksheet.col_values(2)

    if user in values_list:
        user = f'{user}'
    elif (f'{user} ' in values_list):
        user = f'{user} '
    elif (f'{user}  ' in values_list):
        user = f'{user}  '
    else:
        skipOrNot = True
        await ctx.response.send_message(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫–∞ `{user}` –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        infochat = ctx.channel_id # —á–∞—Ç
        infochat = client.get_channel(infochat)
        
        msg = await infochat.send(f'**üîÑ –æ–∂–∏–¥–∞–π...**')
        await msg.add_reaction('‚úÖ')
        await msg.add_reaction('‚ùå')
        await msg.edit(content='‚ùì –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É?')

        trueUser = ctx.user
        
        def check(reaction, msgAuthor): # trueUser = ctx.user
            if trueUser == msgAuthor:
                return msgAuthor == ctx.user and str(reaction.emoji) == '‚úÖ' or str(reaction.emoji) == '‚ùå'
        try:
            reaction, msgAuthor = await client.wait_for('reaction_add', timeout=25.0, check=check)
        except asyncio.TimeoutError:
            await msg.edit(content='‚ùå –ß–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
        else:
            if reaction.emoji == '‚ùå':
                await msg.edit(content='‚ùå –û—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.')
                return
            elif reaction.emoji == '‚úÖ':
                await msg.edit(content=f'**üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å–∏–∫ :middle_finger:**') #{reaction.emoji}
                try:
                    newPlayer()
                    await msg.edit(content=f'‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–ø–∏—Å–∞–ª —Ç–µ—Å—Ç –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É!')
                except:
                    await msg.edit(content='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–∏–Ω–≥—É–π –∏–¥–∏–æ—Ç–∞ –∫—Å–æ–≤–∞.')
            else:
                await msg.edit(content='‚ùå —á–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')




    if skipOrNot == True:
        return
    await ctx.response.defer()

    cell = worksheet.find(user)
    
    row = cell.row
    col = cell.col

        
    banCount = checkForBan(row, worksheet)
    warnCount = checkForWarn(row, worksheet)
    embed = await getProfileFromSheet(user, warnCount, banCount, checkForTest(row, sh), row, col, worksheet)

    await asyncio.sleep(3)
    await ctx.followup.send(embed=embed)
    infochat = ctx.channel_id # —á–∞—Ç
    infochat = client.get_channel(infochat)
    
    msg = await infochat.send(f'**üîÑ –ø–æ–∏—Å–∫ {user}...**')
    await msg.add_reaction('‚úÖ')
    await msg.add_reaction('‚ùå')
    await msg.edit(content='‚ùì –≠—Ç–æ —Ç–æ—Ç —Å–∞–º—ã–π –∏–≥—Ä–æ–∫?')

    trueUser = ctx.user
    
    def check(reaction, msgAuthor): # trueUser = ctx.user
        if trueUser == msgAuthor:
            return msgAuthor == ctx.user and str(reaction.emoji) == '‚úÖ' or str(reaction.emoji) == '‚ùå'
    try:
        reaction, msgAuthor = await client.wait_for('reaction_add', timeout=25.0, check=check)
    except asyncio.TimeoutError:
        await msg.edit(content='‚ùå –ß–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
    else:
        if reaction.emoji == '‚ùå':
            await msg.edit(content='‚ùå –û—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.')
            return
        elif reaction.emoji == '‚úÖ':
            await msg.edit(content=f'**üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å–∏–∫ :middle_finger:**') #{reaction.emoji}
        else:
            await msg.edit(content='‚ùå —á–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
            return

        logs = client.get_channel(LOGS)

        try:
            cell = worksheet.find(user)
            row = cell.row
            col = cell.col
        except AttributeError:
            row = '-'
            col = '-'


        member = msgAuthor

        await msgToLOGG(ctx, worksheet, user, msgAuthor, choose=choose)

        
        def oldPlayer():
            def testFormat():
                worksheet.format(f"H{row}", {
                    "horizontalAlignment": "CENTER",
                    "textFormat": {
                    "fontSize": 12,
                    "bold": True
                    }
                })

            if choose.value == 1: # –ø—Ä–æ—à–µ–ª
                worksheet.update(f'H{row}', '–î–∞')
                testFormat()
            elif choose.value == 2: # –Ω–µ –ø—Ä–æ—à–µ–ª
                worksheet.update(f'H{row}', '–ù–µ—Ç')
                testFormat()
            elif choose.value == 3: # —É–±—Ä–∞—Ç—å
                worksheet.update(f'H{row}', '')


            mainCount = max(warnCount, banCount)
            
            if mainCount > 1:
                try:
                    worksheet.merge_cells(f'H{row}:H{row+mainCount}', 'MERGE_ALL')
                except:
                    pass
                


        emoji = (reaction.emoji)
        emoji = str(emoji)
        if reaction.emoji == '‚úÖ':                
            try:
                oldPlayer()
                await msg.edit(content='‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞.')
            except:
                await msg.edit(content='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–∏–Ω–≥—É–π –∏–¥–∏–æ—Ç–∞ –∫—Å–æ–≤–∞.')
        if reaction.emoji == '‚ùå':
            return


@client.tree.command(name = "—Å–º–µ–Ω–∏—Ç—å-—Ü–≤–µ—Ç", description= '—Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ', guild=discord.Object(id=GUILD))
@app_commands.choices(—Ü–≤–µ—Ç=[
    discord.app_commands.Choice(name='–æ—á–∏—Å—Ç–∏—Ç—å', value=1),
    discord.app_commands.Choice(name='–∑–µ–ª—ë–Ω—ã–π', value=2),
    discord.app_commands.Choice(name='–æ—Ä–∞–Ω–∂–µ–≤—ã–π', value=3),
    discord.app_commands.Choice(name='–∫—Ä–∞—Å–Ω—ã–π', value=4),
    discord.app_commands.Choice(name='—á—ë—Ä–Ω—ã–π', value=5),
], 
—Å—Ç–æ–ª–±–∏–∫=[
discord.app_commands.Choice(name='–∏–≥—Ä–æ–∫', value=1),
discord.app_commands.Choice(name='–≤–∞—Ä–Ω', value=2),
discord.app_commands.Choice(name='–±–∞–Ω', value=3),
])
async def change_color(ctx, –Ω–∏–∫: str=None, —Å—Ç–æ–ª–±–∏–∫: app_commands.Choice[int]=0, —Ü–≤–µ—Ç: app_commands.Choice[int]=0, –Ω–æ–º–µ—Ä_–Ω–∞–∫–∞–∑–∞–Ω–∏—è: int=0):

    user = –Ω–∏–∫
    color = —Ü–≤–µ—Ç
    punish = —Å—Ç–æ–ª–±–∏–∫
    rule_number = –Ω–æ–º–µ—Ä_–Ω–∞–∫–∞–∑–∞–Ω–∏—è

    access = discord.utils.find(lambda r: r.name == 'üìù', ctx.guild.roles)
    if access not in ctx.user.roles:
        await ctx.response.send_message('‚ùå –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return


    if user == None:
        await ctx.response.send_message(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∏–≥—Ä–æ–∫.")
        return

    
    try:
        if color.value == 0:
            await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç.')
            return
    except AttributeError:
        await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç.')
        return

    try:
        if punish.value == 0:
            await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ.')
            return
    except AttributeError:
        await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ.')
        return





    if punish.value != 1:
        if rule_number == 0:
            await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä –Ω–∞–∫–∞–∑–∞–Ω–∏—è.')
            return

    await ctx.response.defer()
    gc, sh, worksheet = joinToSheet()
    values_list = worksheet.col_values(2)

    if user in values_list:
        user = f'{user}'
        await ctx.followup.send(f"‚úÖ –ò–≥—Ä–æ–∫ `{user}` –Ω–∞–π–¥–µ–Ω.")
    elif (f'{user} ' in values_list):
        user = f'{user} '
        await ctx.followup.send(f"‚úÖ –ò–≥—Ä–æ–∫ `{user}` –Ω–∞–π–¥–µ–Ω.")
    elif (f'{user}  ' in values_list):
        user = f'{user}  '
        await ctx.followup.send(f"‚úÖ –ò–≥—Ä–æ–∫ `{user}` –Ω–∞–π–¥–µ–Ω.")
    else:
        await ctx.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{user}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä.")
        return


    
    
    infochat = ctx.channel_id # —á–∞—Ç
    infochat = client.get_channel(infochat)
    trueUser = ctx.user

    msg = await infochat.send(f'**üîÑ –ø–æ–∏—Å–∫ {user}...**')
    await msg.add_reaction('‚úÖ')
    await msg.add_reaction('‚ùå')
    await msg.edit(content='‚ùì –≠—Ç–æ —Ç–æ—Ç —Å–∞–º—ã–π –∏–≥—Ä–æ–∫?')



    def check(reaction, msgAuthor): # trueUser = ctx.user
        if trueUser == msgAuthor:
            return msgAuthor == ctx.user and str(reaction.emoji) == '‚úÖ' or str(reaction.emoji) == '‚ùå'
    try:
        reaction, msgAuthor = await client.wait_for('reaction_add', timeout=25.0, check=check)
    except asyncio.TimeoutError:
        await msg.edit(content='‚ùå –ß–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
    else:
        if reaction.emoji == '‚ùå':
            await msg.edit(content='‚ùå –û—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.')
            return
        elif reaction.emoji == '‚úÖ':
            await msg.edit(content=f'**üîÑ –ö—Ä–∞—à—É {user}...**')
        else:
            await msg.edit(content='‚ùå —á–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
            return



    cell = worksheet.find(user)
    row = cell.row
    
    match color.value:
        case 1: # clear
            colorUserArg = 'c'
            colorEmoji = '‚¨ú'
        case 2: # green
            colorUserArg = 'g'
            colorEmoji = 'üü©'
        case 3: # orange
            colorUserArg = 'o'
            colorEmoji = 'üüß'
        case 4: # red
            colorUserArg = 'r'
            colorEmoji = 'üü•'
        case 5: # black
            colorUserArg = 'b'
            colorEmoji = '‚óºÔ∏è'

    match punish.value:
        case 1: # user
            colorUserArg += 'User'
            punishWord = '–∏–≥—Ä–æ–∫'
        case 2: # warn
            colorUserArg += 'Warn'
            punishWord = '–≤–∞—Ä–Ω'
        case 3: # ban
            colorUserArg += 'Ban'
            punishWord = '–±–∞–Ω'


    async def checkLenRule():
        if punish.value == 2:
            if sh.sheet1.get(f'D{str(row)}') == []:
                await msg.edit(content=f'‚ùå –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —É–∫–∞–∑–Ω–æ–≥–æ **–≤–∞—Ä–Ω–∞.**')
                return None
            ruleCount = checkForWarn(row, worksheet)
        elif punish.value == 3:
            if sh.sheet1.get(f'G{str(row)}') == []:
                await msg.edit(content=f'‚ùå –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —É–∫–∞–∑–Ω–æ–≥–æ **–±–∞–Ω–∞.**')
                return None
            ruleCount = checkForBan(row, worksheet)
        if rule_number > ruleCount:
            await msg.edit(content=f'‚ùå –í—ã–±—Ä–∞–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ —É –∏–≥—Ä–æ–∫–∞.')
            return None
        return int(rule_number)
        

    if punish.value != 1:
        if rule_number != 0:
            rowNumberToAdd = await checkLenRule()
            if rowNumberToAdd == None:
                return
            else:
                rowNumberToAdd -= 1
    else:
        rowNumberToAdd = 0



    if rowNumberToAdd == None:
        return
    else:
        def gUser():
            worksheet.format(f"B{row}", { 'backgroundColor': {
                'red':52/255,
                'green':168/255,
                'blue':83/255}})
        
        def oUser():
            worksheet.format(f"B{row}", { 'backgroundColor': {
                'red':251/255,
                'green':188/255,
                'blue':4/255}})

        def rUser():
            worksheet.format(f"B{row}", { 'backgroundColor': {
                'red':234/255,
                'green':67/255,
                'blue':53/255}})

        def bUser():
            worksheet.format(f"B{row}", {
                "backgroundColor": {
                "red": 255.0,
                "green": 255.0,
                "blue": 255.0
                },
                "textFormat": {
                "foregroundColor": {
                    "red": 1.0,
                    "green": 1.0,
                    "blue": 1.0
                },
                }
            })

        def oWarn():
            worksheet.format(f"D{row+rowNumberToAdd}", { 'backgroundColor': {
                'red':251/255,
                'green':188/255,
                'blue':4/255}})
        
        def oBan():
            worksheet.format(f"G{row+rowNumberToAdd}", { 'backgroundColor': {
                'red':251/255,
                'green':188/255,
                'blue':4/255}})
        
        def rBan():
            worksheet.format(f"G{row+rowNumberToAdd}", { 'backgroundColor': {
                'red':234/255,
                'green':67/255,
                'blue':53/255}})
        
        def cUser():
            worksheet.format(f"B{row}", {
                "backgroundColor": {
                "red": 255/255,
                "green": 255/255,
                "blue": 255/255
                },
                "textFormat": {
                "foregroundColor": {
                    "red": 0/255,
                    "green": 0/255,
                    "blue": 0/255
                },
                }
            })
        
        def cWarn():
            worksheet.format(f"D{row+rowNumberToAdd}", {
                "backgroundColor": {
                "red": 255/255,
                "green": 255/255,
                "blue": 255/255
                },
                "textFormat": {
                "foregroundColor": {
                    "red": 0/255,
                    "green": 0/255,
                    "blue": 0/255
                },
                }
            })
        
        def cBan():
            worksheet.format(f"G{row+rowNumberToAdd}", {
                "backgroundColor": {
                "red": 255/255,
                "green": 255/255,
                "blue": 255/255
                },
                "textFormat": {
                "foregroundColor": {
                    "red": 0/255,
                    "green": 0/255,
                    "blue": 0/255
                },
                }
            })

        allowed_list = ['gUser', 'oUser', 'rUser', 'bUser', 'oWarn', 'oBan', 'rBan', 'cUser', 'cWarn', 'cBan']
        if colorUserArg in allowed_list:
            if punishWord == '–∏–≥—Ä–æ–∫':
                match colorUserArg:
                    case 'gUser':
                        gUser()
                    case 'oUser':
                        oUser()
                    case 'rUser':
                        rUser()
                    case 'bUser':
                        bUser()
                    case 'cUser':
                        cUser()
                await msg.edit(content=f'‚úÖ **–ò–≥—Ä–æ–∫ –ø–æ–∫—Ä–∞—à–µ–Ω –≤ {colorEmoji}!**')
            elif punishWord == '–≤–∞—Ä–Ω':
                match colorUserArg:
                    case 'oWarn':
                        oWarn()
                    case 'cWarn':
                        cWarn()
                await msg.edit(content=f'‚úÖ **–í–∞—Ä–Ω #{rule_number} –ø–æ–∫—Ä–∞—à–µ–Ω –≤ {colorEmoji}!**')
            elif punishWord == '–±–∞–Ω':
                match colorUserArg:
                    case 'oBan':
                        oBan()
                    case 'rBan':
                        rBan()
                    case 'cBan':
                        cBan()
                await msg.edit(content=f'‚úÖ **–ë–∞–Ω #{rule_number} –ø–æ–∫—Ä–∞—à–µ–Ω –≤ {colorEmoji}!**')
            await msgToLOGG(ctx, worksheet, user, msgAuthor, clrColor=colorEmoji, clrColum=punishWord, clrNumber=rule_number, isColor=True)
        else:
            await msg.edit(content=f'‚ùå –í —Ç–∞–∫–æ–π —Ü–≤–µ—Ç - {colorEmoji}, {punishWord} –∫—Ä–∞—Å–∏—Ç—å –Ω–µ–ª—å–∑—è.')





@client.tree.command(name = "–≤—ã–¥–∞—Ç—å-–∂–∞–ª–æ–±—É", description= '–≤—ã–¥–∞–µ—Ç –∂–∞–ª–æ–±—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω—É–∂–Ω–æ –∞–π–¥–∏ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ', guild=discord.Object(id=GUILD))
async def report(ctx, user: str=None):


    #–≤–∞–≤–¥–µ–Ω
    echoRole = discord.utils.find(lambda r: r.name == '‚úåÔ∏è', ctx.guild.roles)
    if echoRole not in ctx.user.roles:
        await ctx.response.send_message('‚ùå –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return
    

    if user == None:
        await ctx.response.send_message('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.')
        return

    profile = await get_user_profile(user)
    user_id = user
    new_value = profile['report'] + 1
    parameter = 'report'
    await set_user_profile(user_id, parameter, new_value)

    logs = client.get_channel(LOGS)
    await logs.send(f'‚è∞ {ctx.user} –∑–∞–ø–∏—Å–∞–ª <@{user}> –Ω–æ–≤—É—é –∂–∞–ª–æ–±—É')
    await ctx.response.send_message('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ.')




@client.tree.command(name = "–ø—Ä–æ—Ñ–∏–ª—å", description = '—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', guild=discord.Object(id=GUILD))
async def profile(ctx, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: discord.Member = None):

    user = –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    if user == None:
        user = ctx.user
    

    await ctx.response.defer()
    profile = await get_user_profile(user.id)


    embed = discord.Embed(
        colour=checkRole(ctx=ctx, user=user), 
        #description="–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.", 
        title=user
    )
    #embed.set_author(name=user, url="https://docs.google.com/spreadsheets/d/1R9kxpwp9PopkUoiF2DXTVphvwLDepJ0gkwDV8a2_8tQ/edit?pli=1#gid=0")


    embed.add_field(name="‚ö†Ô∏è –í–∞—Ä–Ω—ã", value=f'{profile["warn"]}')
    embed.add_field(name="‚õî –ë–∞–Ω—ã", value=f'{profile["ban"]}')
    embed.add_field(name="‚è∞ –ñ–∞–ª–æ–±—ã", value=f'{profile["report"]}')
    
    
    #embed.set_image(url=member.avatar.url)
    embed.set_thumbnail(url=user.avatar.url)

    embed.set_footer(text=checkFooter(ctx=ctx, user=user))


    #await asyncio.sleep(3)
    await ctx.followup.send(embed=embed)




@client.tree.command(name = "–ø–æ–∏—Å–∫", description = "–ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ", guild=discord.Object(id=GUILD))
async def first_command(ctx, –∏–≥—Ä–æ–∫: str = None):

    user = –∏–≥—Ä–æ–∫

    gc, sh, worksheet = joinToSheet()


    if user == None:
        await ctx.response.send_message(f"‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã.")
        return

    
    values_list = worksheet.col_values(2)


    user.strip()

    if user in values_list:
        user = f'{user}'
    elif (f'{user} ' in values_list):
        user = f'{user} '
    elif (f'{user}  ' in values_list):
        user = f'{user}  '
    else:
        await ctx.response.send_message(f"‚ùå –ò–≥—Ä–æ–∫ `{user}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä.")
        return

    
    await ctx.response.defer() # ephemeral=True

    
    cell = worksheet.find(user)
    
    row = cell.row
    col = cell.col


    embed = await getProfileFromSheet(user, checkForWarn(row, worksheet), checkForBan(row, worksheet), checkForTest(row, sh), row, col, worksheet, UserWarnBan='User')

    await asyncio.sleep(3)
    await ctx.followup.send(embed=embed)


    
@client.tree.command(name = "–≤—ã–¥–∞—Ç—å-–Ω–∞–∫–∞–∑–∞–Ω–∏–µ", description = "–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∏–≥—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ", guild=discord.Object(id=GUILD))
@app_commands.choices(–Ω–∞–∫–∞–∑–∞–Ω–∏–µ=[
    discord.app_commands.Choice(name='–≤–∞—Ä–Ω', value=1),
    discord.app_commands.Choice(name='–±–∞–Ω', value=2),
])
async def second_command(ctx, –Ω–∏–∫: str=None, –Ω–∞–∫–∞–∑–∞–Ω–∏–µ: app_commands.Choice[int]=0, –ø—Ä–∞–≤–∏–ª–æ: str=None, –ø—Ä–∏—á–∏–Ω–∞: str='None'):

    user = –Ω–∏–∫
    punish = –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
    rule = –ø—Ä–∞–≤–∏–ª–æ
    reason = –ø—Ä–∏—á–∏–Ω–∞

    gc, sh, worksheet = joinToSheet()

    # üìù
    access = discord.utils.find(lambda r: r.name == 'üìù', ctx.guild.roles)
    if access not in ctx.user.roles:
        await ctx.response.send_message('‚ùå –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return

    values_list = worksheet.col_values(2)



    def newPlayer():
        lastdude = values_list[-1]

        cell = worksheet.find(lastdude)
        row = cell.row
        
        banCount = checkForBan(row, worksheet)
        warnCount = checkForWarn(row, worksheet)
        mainCount = max(banCount, warnCount)

        if mainCount != 0:
            row += mainCount
        else:
            row += 1

        worksheet.update(f'B{row}', user)
        if punish.value == 1:
            worksheet.update(f'C{row}', '1')
            worksheet.update(f'D{row}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
            worksheet.insert_note(f'D{row}', f'{reason}')
            worksheet.format(f'D{row}', {'textFormat': {'strikethrough': False}})

        if punish.value == 2:
            worksheet.update(f'F{row}', '1')
            worksheet.update(f'G{row}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
            worksheet.insert_note(f'G{row}', f'{reason}')
            worksheet.format(f'G{row}', {'textFormat': {'strikethrough': False}})


    
    def oldPlayer():

        cell = worksheet.find(user)
        row = cell.row
        col = cell.col



        def warnCountSystem():

            if ruleNumbers[0] == ['']:
                return 0
            li = []
            warnCount = 0
            for x in ruleNumbers:
                if x not in li:
                    li.append(x)
                else:
                    break
            for x in li:
                if x != ['']:               
                    warnCount += 1

            return warnCount


        def banCountSystem():
            if ruleNumbersSecond[0] == ['']:
                return 0
            li2 = []
            banCount = 0
            for x in ruleNumbersSecond:
                if x not in li2:
                    li2.append(x)
                else:
                    break
            for x in li2:
                if x != ['']:               
                    banCount += 1

            return banCount

        ruleNumbers = worksheet.get_values(f'C{row}:C{row+50}')
        ruleNumbersSecond = worksheet.get_values(f'F{row}:F{row+50}')

        try:
            warnCount = warnCountSystem()
        except:
            warnCount = 0
        try:
            banCount = banCountSystem()
        except:
            banCount = 0

        warnCount = int(warnCount)
        banCount = int(banCount)

        mainCount = max(banCount, warnCount)



        def addField(count):
            worksheet.insert_row(['', '', '', '', '', '', ''], index=row+count) #count+1
            worksheet.merge_cells(f'B{row}:B{row+count}', 'MERGE_ALL')

        cell = worksheet.find(user)
        row = cell.row
        if punish.value == 1:
            warnNullOrNot = worksheet.get_values(f'D{row}:D{row+50}')
            
            needToAdd = 0

            try:
                if warnNullOrNot[0] != ['']:
                    for x in warnNullOrNot:
                        if x == ['']:
                            break
                        needToAdd += 1
            except:
                warnNullOrNot = 0
                needToAdd = 0
            if warnCount > needToAdd:
                worksheet.update(f'D{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'D{row+needToAdd}', f'{reason}')
                worksheet.format(f'D{row+needToAdd}', {'textFormat': {'strikethrough': False}})

            elif warnCount < needToAdd:
                addField(warnCount)
                worksheet.update(f'C{row+warnCount}', str(f'{warnCount+1}')) # testt
                worksheet.update(f'D{row+warnCount}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'D{row+warnCount}', f'{reason}')
                worksheet.format(f'D{row+warnCount}', {'textFormat': {'strikethrough': False}})

            elif warnCount == needToAdd:
                if warnCount == 0 and needToAdd == 0:
                    worksheet.update(f'C{row+needToAdd}', str(f'1'))
                    worksheet.update(f'D{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'D{row+needToAdd}', f'{reason}')
                    worksheet.format(f'D{row+needToAdd}', {'textFormat': {'strikethrough': False}})
                elif warnCount < mainCount:
                    worksheet.update(f'C{row+needToAdd}', str(f'{warnCount+1}'))
                    worksheet.update(f'D{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'D{row+needToAdd}', f'{reason}')
                    worksheet.format(f'D{row+needToAdd}', {'textFormat': {'strikethrough': False}})
                else:
                    addField(warnCount)
                    worksheet.update(f'C{row+warnCount}', str(f'{warnCount+1}')) # testt
                    worksheet.update(f'D{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'D{row+needToAdd}', f'{reason}')
                    worksheet.format(f'D{row+needToAdd}', {'textFormat': {'strikethrough': False}})
            
            else:
                print('—ç—Ç–æ –ü–ò–ó–î–µ—Ü')


            
        if punish.value == 2:
            banNullOrNot = worksheet.get_values(f'G{row}:G{row+50}')
            
            needToAdd = 0
            try:
                if banNullOrNot[0] != ['']:
                    for x in banNullOrNot:
                        if x == ['']:
                            break
                        needToAdd += 1
            except:
                needToAdd = 0
            if banCount > needToAdd:
                worksheet.update(f'G{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                worksheet.format(f'G{row+needToAdd}', {'textFormat': {'strikethrough': False}})

            elif banCount < needToAdd:
                addField(banCount)
                worksheet.update(f'F{row+banCount}', str(f'{banCount+1}')) # test
                worksheet.update(f'G{row+banCount}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'G{row+banCount}', f'{reason}')
                worksheet.format(f'G{row+banCount}', {'textFormat': {'strikethrough': False}})

            elif banCount == needToAdd:
                if banCount == 0 and needToAdd == 0:
                    worksheet.update(f'F{row+needToAdd}', str(f'1'))
                    worksheet.update(f'G{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                    worksheet.format(f'G{row+needToAdd}', {'textFormat': {'strikethrough': False}})
                elif banCount < mainCount:
                    worksheet.update(f'F{row+needToAdd}', str(f'{banCount+1}'))
                    worksheet.update(f'G{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                    worksheet.format(f'G{row+needToAdd}', {'textFormat': {'strikethrough': False}})
                else:
                    addField(banCount)
                    worksheet.update(f'F{row+banCount}', str(f'{banCount+1}')) # test
                    worksheet.update(f'G{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                    worksheet.format(f'G{row+needToAdd}', {'textFormat': {'strikethrough': False}})



    async def nextStep(choose):
        match choose:
            case 'old':
                cell = worksheet.find(user)
                row = cell.row
                col = cell.col

                infochat = ctx.channel_id # —á–∞—Ç
                infochat = client.get_channel(infochat)
                msg = await infochat.send(f'üîÑ –∑–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ {user}..')
                embed = await getProfileFromSheet(user, checkForWarn(row, worksheet), checkForBan(row, worksheet), checkForTest(row, sh), row, col, worksheet, UserWarnBan='User')
                await asyncio.sleep(3)
                await ctx.followup.send(embed=embed)
            case 'new':
                infochat = ctx.channel_id # —á–∞—Ç
                infochat = client.get_channel(infochat)
                msg = await infochat.send(f'üîÑ –æ–∂–∏–¥–∞–π..')
        trueUser = ctx.user



        
        await msg.add_reaction('‚úÖ')
        await msg.add_reaction('‚ùå')
        await msg.edit(content=f' \n\n–ù–∞–∫–∞–∑–∞–Ω–∏–µ:  {punishEmoji}\n\n–ü—Ä–∞–≤–∏–ª–æ: **{rule}**\n\n–ü—Ä–∏—á–∏–Ω–∞: ```{reason}```')

        def check(reaction, msgAuthor): # trueUser = ctx.user
            if trueUser == msgAuthor:
                return msgAuthor == ctx.user and str(reaction.emoji) == '‚úÖ' or str(reaction.emoji) == '‚ùå'
        try:
            reaction, msgAuthor = await client.wait_for('reaction_add', timeout=25.0, check=check)
        except asyncio.TimeoutError:
            await msg.edit(content='‚ùå –ß–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
        else:
            if reaction.emoji == '‚ùå':
                await msg.edit(content='‚ùå –û—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.')
                return
            elif reaction.emoji == '‚úÖ':
                await msg.edit(content=f'**üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å–∏–∫ :middle_finger:**') #{reaction.emoji}
            else:
                await msg.edit(content='‚ùå —á–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')

            logs = client.get_channel(LOGS)

            await msgToLOGG(ctx, worksheet, user, msgAuthor, rule=rule, reason=reason)
            emoji = (reaction.emoji)
            emoji = str(emoji)
            if reaction.emoji == '‚úÖ':                
                try:
                    match choose:
                        case 'new':
                            newPlayer()
                        case 'old':
                            oldPlayer()
                    await msg.edit(content='‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞.')
                    if punish.value == 1:
                        profile = await get_user_profile(ctx.user.id)
                        user_id = ctx.user.id
                        new_value = profile['warn'] + 1
                        parameter = 'warn'
                        await set_user_profile(user_id, parameter, new_value)
                        
                        logs = client.get_channel(LOGS)
                        await logs.send(f'‚ö†Ô∏è {ctx.user} –∑–∞–ø–∏—Å–∞–ª —Å–µ–±–µ –≤–∞—Ä–Ω—á–∏–∫')
                    elif punish.value == 2:
                        profile = await get_user_profile(ctx.user.id)
                        user_id = ctx.user.id
                        new_value = profile['ban'] + 1
                        parameter = 'ban'
                        await set_user_profile(user_id, parameter, new_value)

                        logs = client.get_channel(LOGS)
                        await logs.send(f'‚õî {ctx.user} –∑–∞–ø–∏—Å–∞–ª —Å–µ–±–µ –±–∞–Ω—á–∏–∫')
                    else:
                        logs = client.get_channel(LOGS)
                        await logs.send(f'‚ùì {ctx.user} —á—Ç–æ —Ç–æ —Å–¥–µ–ª–∞–ª, –∏ —è –¥–æ–ª–∂–µ–Ω –±—ã–ª —á—ë—Ç–∞ –∑–∞–ø–∏—Å–∞—Ç—å... –ø–æ—Ö—É–π)')
                except:
                    await msg.edit(content='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–∏–Ω–≥—É–π –∏–¥–∏–æ—Ç–∞ –∫—Å–æ–≤–∞.')
            if reaction.emoji == '‚ùå':
                return
        








    if user == None:
        await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫.')
        return
    
    try:
        if punish.value == 0:
            await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ.')
            return
    except AttributeError:
        await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ.')
        return
    

    if punish.value == 1:
        punishEmoji = '‚ö†Ô∏è'
    elif punish.value == 2:
        punishEmoji = '‚õî'
    else:
        punishEmoji = '‚ùì'
    


    try:
        if '–ü—Ä–∞–≤–∏–ª–æ' in rule or '–ø—Ä–∞–≤–∏–ª–æ' in rule:
            await ctx.response.send_message('‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ, **–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.**')
            return
    except:
        await ctx.response.send_message('‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ, **–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.**')
        return



    values_list = worksheet.col_values(2)

    if user in values_list:
        user = f'{user}'
        await ctx.response.defer()
        await nextStep('old')
    elif (f'{user} ' in values_list):
        await ctx.response.defer()
        user = f'{user} '
        await nextStep('old')
    elif (f'{user}  ' in values_list):
        await ctx.response.defer()
        user = f'{user}  '
        await nextStep('old')
    else:
        await ctx.response.send_message(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ `{user}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await nextStep('new')






        
        
                   ##### ######   
                  ##############   
                  ##############   
                  ##############   
                  ######–∞#######   
                  ######—à#######   
                  ######–∞#######    
                  ##############
                  ######—Ç#######
                  ######–∏#######
                  ######—Ä#######
                  ######—Å#######
                  ##############                    
                  ##############
        ##############      ##############
        ##############      ##############
        ##############      ##############
################################################################################################
client.run(token=TOKEN)
################################################################################################