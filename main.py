import discord
import gspread
import asyncio
import json
#import httplib2 
#import apiclient.discovery

#from apiclient import discovery

#from oauth2client.service_account import ServiceAccountCredentials


from discord.ext import commands
from discord.utils import get
from config import *

from discord import app_commands


intents = discord.Intents.all()
intents.members = True
intents.message_content = True

client = commands.Bot(command_prefix=PREFIX, intents=intents, help_command=None)



gc = gspread.service_account(filename='secretkey.json')
sh = gc.open("–∫–æ–ø–∏—è 2.0")
worksheet = sh.sheet1


########################


# user = 'bbbaka'

# cell = worksheet.find(user)
# row = cell.row
# col = cell.col


########################





########################


@client.event
async def on_ready():
    print(f"–Ø –°–ù–û–í–ê –ñ–ò–í–£ - {client.user}")
    await client.tree.sync(guild=discord.Object(id=GUILD)) # —Å–∏–Ω—Ö–æ—Ä–Ω–∏–∑–∞—Ü–∏—è
    await client.change_presence(status=discord.Status.online, activity = discord.Activity(name = f'–Ω–∞ –≤—Å–µ—Ö —Å–≤—ã—Å–æ–∫–∞.', type = discord.ActivityType.watching))


# @client.listen("on_command_error")
# async def cooldown_message(error):
#     errorlog = client.get_channel(ERROR_ROOM) # —á–∞—Ç
#     await errorlog.send(f"```\n\n\n\n\n\n_error_\n\n{error}```")



# @client.command()
# async def qwe(ctx, member: discord.Member = None):
#     if member == None:
#         member = ctx.author
#     print(member)
#     print(type(member))
#     embed = discord.Embed(title = member).set_image(url=member.avatar.url)
#     await ctx.send(embed=embed)



async def get_user_profile(user_id):
    user_id = str(user_id)

    with open("basa.json", "r") as file:
        profile = json.load(file)

    if user_id not in profile.keys():
        profile[user_id] = PROFILE_DEFAULT
    
        logs = client.get_channel(LOGS)
        await logs.send(f'‚ùó <@{user_id}> —Å–æ–∑–¥–∞—ë—Ç —Å–µ–±–µ –ë–î.')

    with open("basa.json", "w") as file:
        json.dump(profile, file)

    return profile[user_id]

async def set_user_profile(user_id, parameter, new_value):
    user_id = str(user_id)

    with open("basa.json", "r") as file:
        profile = json.load(file)

    if user_id not in profile.keys():
        profile[user_id] = PROFILE_DEFAULT

        logs = client.get_channel(LOGS)
        await logs.send(f'‚ùó <@{user_id}> —Å–æ–∑–¥–∞—ë—Ç —Å–µ–±–µ –ë–î, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ.')

    profile[user_id][parameter] = new_value

    with open("basa.json", "w") as file:
        json.dump(profile, file)


@client.tree.command(name = "addreport", description= '–≤—ã–¥–∞—Ç—å –∂–∞–ª–æ–±—É, —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω—É–∂–Ω–æ –∞–π–¥–∏', guild=discord.Object(id=GUILD))
async def report(ctx, user: str=None):


    #–≤–∞–≤–¥–µ–Ω
    echoRole = discord.utils.find(lambda r: r.name == '–≤–∞–≤–¥–µ–Ω', ctx.guild.roles)
    if echoRole not in ctx.user.roles:
        await ctx.response.send_message('‚ùå –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return

    if user == None:
        await ctx.response.send_message('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.')
        return

    profile = await get_user_profile(user)
    user_id = user
    new_value = profile['report'] + 1
    parameter = 'report'
    await set_user_profile(user_id, parameter, new_value)

    logs = client.get_channel(LOGS)
    await logs.send(f'‚è∞ {ctx.user} –∑–∞–ø–∏—Å–∞–ª <@{user}> –Ω–æ–≤—É—é –∂–∞–ª–æ–±—É')
    await ctx.response.send_message('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ.')


@client.tree.command(name = "profile", description = '—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', guild=discord.Object(id=GUILD))
async def profile(ctx):

    member = ctx.user

    def checkRole():
        echoRole = discord.utils.find(lambda r: r.name == '‚òÑÔ∏è', ctx.guild.roles)
        if echoRole in ctx.user.roles:
            return discord.Colour.blue()
        else:
            return discord.Colour.red()
        
    def checkFooter():
        echoRole = discord.utils.find(lambda r: r.name == '‚òÑÔ∏è', ctx.guild.roles)
        if echoRole in ctx.user.roles:
            return f'{ctx.user.id}, echo'
        else:
            return f'{ctx.user.id}, ???'

    await ctx.response.defer()
    profile = await get_user_profile(ctx.user.id)


    embed = discord.Embed(
        colour=checkRole(), 
        #description="–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.", 
        title=ctx.user
    )
    #embed.set_author(name=user, url="https://docs.google.com/spreadsheets/d/1R9kxpwp9PopkUoiF2DXTVphvwLDepJ0gkwDV8a2_8tQ/edit?pli=1#gid=0")


    embed.add_field(name="‚ö†Ô∏è –í–∞—Ä–Ω—ã", value=f'{profile["warn"]}')
    embed.add_field(name="‚õî –ë–∞–Ω—ã", value=f'{profile["ban"]}')
    embed.add_field(name="‚è∞ –ñ–∞–ª–æ–±—ã", value=f'{profile["report"]}')
    
    
    #embed.set_image(url=member.avatar.url)
    embed.set_thumbnail(url=member.avatar.url)

    embed.set_footer(text=checkFooter())


    #await asyncio.sleep(3)
    await ctx.followup.send(embed=embed)


@client.tree.command(name = "check", description = "–ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ", guild=discord.Object(id=GUILD))
async def first_command(ctx, user: str = None):




    if user == None:
        await ctx.response.send_message(f"‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã.")
        return

    
    values_list = worksheet.col_values(2)


    user.strip()

    if user in values_list:
        user = f'{user}'
    elif (f'{user} ' in values_list):
        user = f'{user} '
    elif (f'{user}  ' in values_list):
        user = f'{user}  '
    else:
        await ctx.response.send_message(f"‚ùå –ò–≥—Ä–æ–∫ `{user}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä.")
        return

    
    await ctx.response.defer()

    
    cell = worksheet.find(user)
    
    row = cell.row
    col = cell.col

        
    def warnCheck():

        ruleNumbers = worksheet.get_values(f'C{row}:C{row+20}')

        if ruleNumbers[0] == ['']:
            return 0
        li = []
        warnCount = 0
        for x in ruleNumbers:
            if x not in li:
                li.append(x)
            else:
                break
        for x in li:
            if x != ['']:               
                warnCount += 1

        return warnCount
    

    def banCheck():
        
        ruleNumbersSecond = worksheet.get_values(f'F{row}:F{row+20}')

        if ruleNumbersSecond[0] == ['']:
            return 0
        li2 = []
        banCount = 0
        for x in ruleNumbersSecond:
            if x not in li2:
                li2.append(x)
            else:
                break
        for x in li2:
            if x != ['']:               
                banCount += 1

        return banCount
        

    def testCheck(row):
        fin = sh.sheet1.get(f'H{str(row)}')
        if fin == []:
            return '-'
        
        fin = fin[0]
        fin = str(fin[0])
        if fin == '–î–∞':
            return '–ü—Ä–æ—à—ë–ª.'
        elif fin == '–ù–µ—Ç':
            return '–ù–µ –ø—Ä–æ—à—ë–ª.'
        else:
            return fin

    def colorStatus():
        colour=discord.Colour.dark_gold()
        return colour


    embed = discord.Embed(
        colour=colorStatus(),
        #description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Ç–∞–±–ª–∏—Ü—ã", 
        title=u"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Ç–∞–±–ª–∏—Ü—ã"
    )
    embed.set_author(name=user)


    embed.add_field(name="‚ö†Ô∏è –í–∞—Ä–Ω—ã", value=warnCheck())
    embed.insert_field_at(1,name="‚õî –ë–∞–Ω—ã", value=banCheck())
    embed.add_field(name="üìÉ –¢–µ—Å—Ç", value=testCheck(row))


    embed.set_footer(text=f'–°—Ç—Ä–æ–∫–∞ {row}, —Å—Ç–æ–ª–±–∏–∫ {col}')


    await asyncio.sleep(3)
    await ctx.followup.send(embed=embed)


    
@client.tree.command(name = "new", description = "–∑–∞–ø–∏—Å—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è", guild=discord.Object(id=GUILD))
@app_commands.choices(punish=[
    discord.app_commands.Choice(name='warn', value=1),
    discord.app_commands.Choice(name='ban', value=2),
])
async def second_command(ctx, user: str=None, punish: app_commands.Choice[int]=0, rule: str=None, reason: str='None'):


    # üìù
    access = discord.utils.find(lambda r: r.name == 'üìù', ctx.guild.roles)
    if access not in ctx.user.roles:
        await ctx.response.send_message('‚ùå –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return

    values_list = worksheet.col_values(2)



    def newPlayer():
        lastdude = values_list[-1]

        cell = worksheet.find(lastdude)
        row = cell.row
        row += 1


        worksheet.update(f'B{row}', user)
        if punish.value == 1:
            worksheet.update(f'C{row}', '1')
            worksheet.update(f'D{row}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
            worksheet.insert_note(f'D{row}', f'{reason}')

        if punish.value == 2:
            worksheet.update(f'F{row}', '1')
            worksheet.update(f'G{row}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
            worksheet.insert_note(f'G{row}', f'{reason}')

        print('govno')


    
    def oldPlayer():

        cell = worksheet.find(user)
        row = cell.row
        col = cell.col



        def warnCountSystem():

            if ruleNumbers[0] == ['']:
                return 0
            li = []
            warnCount = 0
            for x in ruleNumbers:
                if x not in li:
                    li.append(x)
                else:
                    break
            for x in li:
                if x != ['']:               
                    warnCount += 1

            return warnCount


        def banCountSystem():
            if ruleNumbersSecond[0] == ['']:
                return 0
            li2 = []
            banCount = 0
            for x in ruleNumbersSecond:
                if x not in li2:
                    li2.append(x)
                else:
                    break
            for x in li2:
                if x != ['']:               
                    banCount += 1

            return banCount

        ruleNumbers = worksheet.get_values(f'C{row}:C{row+20}')
        ruleNumbersSecond = worksheet.get_values(f'F{row}:F{row+20}')

        try:
            warnCount = warnCountSystem()
        except:
            warnCount = 0
        try:
            banCount = banCountSystem()
        except:
            banCount = 0

        warnCount = int(warnCount)
        banCount = int(banCount)

        mainCount = max(banCount, warnCount)



        def addField(count):
            worksheet.insert_row(['', '', '', '', '', '', ''], index=row+count) #count+1
            worksheet.merge_cells(f'B{row}:B{row+count}', 'MERGE_ALL')

        cell = worksheet.find(user)
        row = cell.row
        if punish.value == 1:
            warnNullOrNot = worksheet.get_values(f'D{row}:D{row+20}')
            
            #print(warnNullOrNot[0])
            needToAdd = 0

            try:
                if warnNullOrNot[0] != ['']:
                    for x in warnNullOrNot:
                        if x == ['']:
                            break
                        needToAdd += 1
            except:
                warnNullOrNot = 0
                needToAdd = 0
            if warnCount > needToAdd:
                worksheet.update(f'D{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'D{row+needToAdd}', f'{reason}')

            elif warnCount < needToAdd:
                print('he4re')
                addField(warnCount)
                worksheet.update(f'C{row+warnCount}', str(f'{warnCount+1}')) # testt
                worksheet.update(f'D{row+warnCount}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'D{row+warnCount}', f'{reason}')

            elif warnCount == needToAdd:
                if warnCount == 0 and needToAdd == 0:
                    worksheet.update(f'C{row+needToAdd}', str(f'1'))
                    worksheet.update(f'D{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'D{row+needToAdd}', f'{reason}')
                elif warnCount < mainCount:
                    worksheet.update(f'C{row+needToAdd}', str(f'{warnCount+1}'))
                    worksheet.update(f'D{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'D{row+needToAdd}', f'{reason}')
                else:
                    addField(warnCount)
                    print('he1re')
                    worksheet.update(f'C{row+warnCount}', str(f'{warnCount+1}')) # testt
                    worksheet.update(f'D{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'D{row+needToAdd}', f'{reason}')
            
            else:
                print('—ç—Ç–æ –ü–ò–ó–î–µ—Ü')


            
        if punish.value == 2:
            banNullOrNot = worksheet.get_values(f'G{row}:G{row+20}')
            
            needToAdd = 0
            if banNullOrNot[0] != ['']:
                for x in banNullOrNot:
                    if x == ['']:
                        break
                    needToAdd += 1
            if banCount > needToAdd:
                worksheet.update(f'G{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')

            elif banCount < needToAdd:
                addField(banCount)
                worksheet.update(f'F{row+banCount}', str(f'{banCount+1}')) # test
                worksheet.update(f'G{row+banCount}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                worksheet.insert_note(f'G{row+banCount}', f'{reason}')

            elif banCount == needToAdd:
                if banCount == 0 and needToAdd == 0:
                    worksheet.update(f'F{row+needToAdd}', str(f'1'))
                    worksheet.update(f'G{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                elif banCount < mainCount:
                    worksheet.update(f'F{row+needToAdd}', str(f'{banCount+1}'))
                    worksheet.update(f'G{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
                else:
                    addField(banCount)
                    worksheet.update(f'F{row+banCount}', str(f'{banCount+1}')) # test
                    worksheet.update(f'G{row+needToAdd}', str(f'–ü—Ä–∞–≤–∏–ª–æ {rule}'))
                    worksheet.insert_note(f'G{row+needToAdd}', f'{reason}')
            
            else:
                print('—ç—Ç–æ –ü–ò–ó–î–µ—Ü')



    async def nextStep(choose):
        infochat = ctx.channel_id # —á–∞—Ç
        infochat = client.get_channel(infochat)
        trueUser = ctx.user



        msg = await infochat.send('üîÑ —Å–µ–∫—É..')
        await msg.add_reaction('‚úÖ')
        await msg.add_reaction('‚ùå')
        await msg.edit(content=f' \n\n–ù–∞–∫–∞–∑–∞–Ω–∏–µ:  {punishEmoji}\n\n–ü—Ä–∞–≤–∏–ª–æ: **{rule}**\n\n–ü—Ä–∏—á–∏–Ω–∞: ```{reason}```')

        def check(reaction, msgAuthor):
            if trueUser == msgAuthor:
                return msgAuthor == ctx.user and str(reaction.emoji) == '‚úÖ' or str(reaction.emoji) == '‚ùå'
        try:
            reaction, msgAuthor = await client.wait_for('reaction_add', timeout=25.0, check=check)
        except asyncio.TimeoutError:
            await msg.edit(content='‚ùå –ß–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')
        else:
            if reaction.emoji == '‚ùå':
                await msg.edit(content='‚ùå –û—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.')
                return
            elif reaction.emoji == '‚úÖ':
                await msg.edit(content=f'**üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å–∏–∫ :middle_finger:**') #{reaction.emoji}
            else:
                await msg.edit(content='‚ùå —á–µ—Ç–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–æ—á–∫–∞. –ª–∏–±–æ **—Ä–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è**, –ª–∏–±–æ **–≤—Ä–µ–º—è –≤—ã—à–ª–æ.**')

            logs = client.get_channel(LOGS)

            try:
                cell = worksheet.find(user)
                row = cell.row
                col = cell.col
            except AttributeError:
                row = '-'
                col = '-'


            member = msgAuthor

            def checkRole():
                echoRole = discord.utils.find(lambda r: r.name == '‚òÑÔ∏è', ctx.guild.roles)
                if echoRole in ctx.user.roles:
                    return discord.Colour.blue()
                else:
                    return discord.Colour.red()
                
            def checkFooter():
                echoRole = discord.utils.find(lambda r: r.name == '‚òÑÔ∏è', ctx.guild.roles)
                if echoRole in ctx.user.roles:
                    return f'{ctx.user.id}, echo'
                else:
                    return f'{ctx.user.id}, ???'


            embed = discord.Embed(
                colour=checkRole(), 
                description=reason, 
                title=f'–í—ã–¥–∞–ª –Ω–æ–≤—ã–π {punish.name} {punishEmoji}'
            )
            embed.set_author(name=ctx.user)

            embed.add_field(name="–ò–≥—Ä–æ–∫", value=user)
            embed.add_field(name="–ü—Ä–∞–≤–∏–ª–æ", value=rule)

            embed.set_thumbnail(url=member.avatar.url)

            embed.set_footer(text=f'{checkFooter()}, {row}')


            await logs.send(embed=embed)
            emoji = (reaction.emoji)
            emoji = str(emoji)
            if reaction.emoji == '‚úÖ':                
                try:
                    match choose:
                        case 'new':
                            newPlayer()
                        case 'old':
                            oldPlayer()
                    await msg.edit(content='‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞.')
                    if punish.value == 1:
                        profile = await get_user_profile(ctx.user.id)
                        user_id = ctx.user.id
                        new_value = profile['warn'] + 1
                        parameter = 'warn'
                        await set_user_profile(user_id, parameter, new_value)
                        
                        logs = client.get_channel(LOGS)
                        await logs.send(f'‚ö†Ô∏è {ctx.user} –∑–∞–ø–∏—Å–∞–ª —Å–µ–±–µ –≤–∞—Ä–Ω—á–∏–∫')
                    elif punish.value == 2:
                        profile = await get_user_profile(ctx.user.id)
                        user_id = ctx.user.id
                        new_value = profile['ban'] + 1
                        parameter = 'ban'
                        await set_user_profile(user_id, parameter, new_value)

                        logs = client.get_channel(LOGS)
                        await logs.send(f'‚õî {ctx.user} –∑–∞–ø–∏—Å–∞–ª —Å–µ–±–µ –±–∞–Ω—á–∏–∫')
                    else:
                        logs = client.get_channel(LOGS)
                        await logs.send(f'‚ùì {ctx.user} —á—Ç–æ —Ç–æ —Å–¥–µ–ª–∞–ª, –∏ —è –¥–æ–ª–∂–µ–Ω –±—ã–ª —á—ë—Ç–∞ –∑–∞–ø–∏—Å–∞—Ç—å... –ø–æ—Ö—É–π)')
                except:
                    await msg.edit(content='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–∏–Ω–≥—É–π –∏–¥–∏–æ—Ç–∞ –∫—Å–æ–≤–∞.')
            if reaction.emoji == '‚ùå':
                return
        








    if user == None:
        await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫.')
        return
    
    try:
        if punish.value == 0:
            await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ.')
            return
    except AttributeError:
        await ctx.response.send_message('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ.')
        return
    

    if punish.name == 'warn':
        punishEmoji = '‚ö†Ô∏è'
    elif punish.name == 'ban':
        punishEmoji = '‚õî'
    else:
        punishEmoji = '‚ùì'

    try:
        if int(rule) not in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
            await ctx.response.send_message('‚ùå –ù–µ –∫–æ—Ä–µ–∫–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π **—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.**')
            return
    except:
        await ctx.response.send_message('‚ùå –ù–µ –∫–æ—Ä–µ–∫–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ, **–∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä—ã.**')
        return



    values_list = worksheet.col_values(2)

    if user in values_list:
        user = f'{user}'
        await ctx.response.send_message(f"‚úÖ –ò–≥—Ä–æ–∫ `{user}` —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—á–∫–µ.")
        await nextStep('old')
    elif (f'{user} ' in values_list):
        user = f'{user} '
        await ctx.response.send_message(f"‚úÖ –ò–≥—Ä–æ–∫ `{user}` —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—á–∫–µ.")
        await nextStep('old')
    elif (f'{user}  ' in values_list):
        user = f'{user}  '
        await ctx.response.send_message(f"‚úÖ –ò–≥—Ä–æ–∫ `{user}` —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—á–∫–µ.")
        await nextStep('old')
    else:
        await ctx.response.send_message(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ `{user}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await nextStep('new')

















        
        
                   ##### ######   
                  ##############   
                  ##############   
                  ##############   
                  ######–∞#######   
                  ######—à#######   
                  ######–∞#######    
                  ##############
                  ######—Ç#######
                  ######–∏#######
                  ######—Ä#######
                  ######—Å#######
                  ##############                    
                  ##############
        ##############      ##############
        ##############      ##############
        ##############      ##############
################################################################################################
client.run(token=TOKEN)
################################################################################################